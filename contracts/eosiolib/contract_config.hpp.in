#pragma once

#include <eosiolib/types.hpp>

#define CONTRACT_FROZEN_DELAY ${FROZEN_DELAY}
#define CONTRACT_NUM_OF_TOP_BPS ${MAX_PRODUCERS}
#define CONTRACT_UPDATE_CYCLE ${UPDATE_CYCLE}

#define RESOURCE_MODEL_UNLIMIT 0
#define RESOURCE_MODEL_FEE 1
#define RESOURCE_MODEL_DELEGATE 2
#define CONTRACT_RESOURCE_MODEL ${RESOURCE_MODEL}

#define IS_ACTIVE_MULTIPLE_VOTE ${IS_ACTIVE_MULTIPLE_VOTE}
#define IS_ACTIVE_BONUS_TO_VOTE ${IS_ACTIVE_BONUS_TO_VOTE}

namespace config {
   const static uint64_t system_account_name    = N(${ROOT_ACCOUNT});
   const static uint64_t null_account_name      = N(${ROOT_ACCOUNT}.null);
   const static uint64_t producers_account_name = N(${ROOT_ACCOUNT}.prods);
   const static uint64_t chain_config_name      = N(${ROOT_ACCOUNT}.config);
   const static uint64_t token_account_name     = N(${ROOT_ACCOUNT}.token);
   const static uint64_t msig_account_name      = N(${ROOT_ACCOUNT}.msig);
   const static uint64_t bios_account_name      = N(${ROOT_ACCOUNT}.bios);
   const static uint64_t fee_account_name       = N(${ROOT_ACCOUNT}.fee);
   const static uint64_t vid_pool_account_name  = N(${ROOT_ACCOUNT}.vpool);
   const static uint64_t bp_pawn_account_name   = N(${ROOT_ACCOUNT}.pawn);
   const static uint64_t develop_account_name   = N(${ROOT_ACCOUNT}.dev);
   const static uint64_t ecosystem_account_name = N(${ROOT_ACCOUNT}.better);
   const static uint64_t pow_pool_account_name  = N(${ROOT_ACCOUNT}.pow)

   const static uint64_t rank_all_account_name     = N(rank.all);
   const static uint64_t rank_new_account_name     = N(rank.new);
   const static uint64_t rank_invite_account_name  = N(rank.invite);
}